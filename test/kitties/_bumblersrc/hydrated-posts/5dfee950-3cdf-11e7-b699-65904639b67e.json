{"type":"text","caption":"<p>Please don&#39;t use any <code>&lt;blink&gt;</code> tags.</p>\n\n<p>You can write this:</p>\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.\n</code></pre><p>to produce:</p>\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;\n</code></pre><h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it&#39;s fairly difficult to devise a &quot;natural&quot; syntax for<br>placing images into a plain text document format.</p>\n<p>Markdown uses an image syntax that is intended to resemble the syntax<br>for links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n<p>Inline image syntax looks like this:</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><p>That is:</p>\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code><br>attribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to<br>the image, and an optional <code>title</code> attribute enclosed in double<br>or single quotes.</li>\n</ul>\n<p>Reference-style image syntax looks like this:</p>\n<pre><code>![Alt text][id]\n</code></pre><p>Where &quot;id&quot; is the name of a defined image reference. Image references<br>are defined using syntax identical to link references:</p>\n<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><p>As of this writing, Markdown has no syntax for specifying the<br>dimensions of an image; if this is important to you, you can simply<br>use regular HTML <code>&lt;img&gt;</code> tags.</p>\n<hr>\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><p>Markdown will turn this into:</p>\n<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;\n</code></pre><p>Automatic links for email addresses work similarly, except that<br>Markdown will also perform a bit of randomized decimal and hex<br>entity-encoding to help obscure your address from address-harvesting<br>spambots. For example, Markdown will turn this:</p>\n<pre><code>&lt;address@example.com&gt;\n</code></pre><p>into something like this:</p>\n<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;\n</code></pre><p>which will render in a browser as a clickable link to &quot;address@example.com&quot;.</p>\n<p>(This sort of entity-encoding trick will indeed fool many, if not<br>most, address-harvesting bots, but it definitely won&#39;t fool all of<br>them. It&#39;s better than nothing, but an address published in this way<br>will probably eventually start receiving spam.)</p>\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal<br>characters which would otherwise have special meaning in Markdown&#39;s<br>formatting syntax. For example, if you wanted to surround a word<br>with literal asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can use<br>backslashes before the asterisks, like this:</p>\n<pre><code>\\*literal asterisks\\*\n</code></pre><p>Markdown provides backslash escapes for the following characters:</p>\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+    plus sign\n-    minus sign (hyphen)\n.   dot\n!   exclamation mark\n</code></pre>","title":"Markdown Kitchen Sink","assets":[],"date":"2017-05-19T17:06:11-05:00","id":"5dfee950-3cdf-11e7-b699-65904639b67e","permalink":"/post/5dfee950-3cdf-11e7-b699-65904639b67e.html","englishDate":"May 19, 2017","rawHtml":"<p><h1>Markdown Kitchen Sink</h1><span><p>Please don&#39;t use any <code>&lt;blink&gt;</code> tags.</p>\n\n<p>You can write this:</p>\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.\n</code></pre><p>to produce:</p>\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;\n</code></pre><h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it&#39;s fairly difficult to devise a &quot;natural&quot; syntax for<br>placing images into a plain text document format.</p>\n<p>Markdown uses an image syntax that is intended to resemble the syntax<br>for links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n<p>Inline image syntax looks like this:</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><p>That is:</p>\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code><br>attribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to<br>the image, and an optional <code>title</code> attribute enclosed in double<br>or single quotes.</li>\n</ul>\n<p>Reference-style image syntax looks like this:</p>\n<pre><code>![Alt text][id]\n</code></pre><p>Where &quot;id&quot; is the name of a defined image reference. Image references<br>are defined using syntax identical to link references:</p>\n<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><p>As of this writing, Markdown has no syntax for specifying the<br>dimensions of an image; if this is important to you, you can simply<br>use regular HTML <code>&lt;img&gt;</code> tags.</p>\n<hr>\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><p>Markdown will turn this into:</p>\n<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;\n</code></pre><p>Automatic links for email addresses work similarly, except that<br>Markdown will also perform a bit of randomized decimal and hex<br>entity-encoding to help obscure your address from address-harvesting<br>spambots. For example, Markdown will turn this:</p>\n<pre><code>&lt;address@example.com&gt;\n</code></pre><p>into something like this:</p>\n<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;\n</code></pre><p>which will render in a browser as a clickable link to &quot;address@example.com&quot;.</p>\n<p>(This sort of entity-encoding trick will indeed fool many, if not<br>most, address-harvesting bots, but it definitely won&#39;t fool all of<br>them. It&#39;s better than nothing, but an address published in this way<br>will probably eventually start receiving spam.)</p>\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal<br>characters which would otherwise have special meaning in Markdown&#39;s<br>formatting syntax. For example, if you wanted to surround a word<br>with literal asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can use<br>backslashes before the asterisks, like this:</p>\n<pre><code>\\*literal asterisks\\*\n</code></pre><p>Markdown provides backslash escapes for the following characters:</p>\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+    plus sign\n-    minus sign (hyphen)\n.   dot\n!   exclamation mark\n</code></pre></span></p>"}